name: tests

on:
  workflow_call:
    inputs:
      linux_dependencies:
        description: "Linux libs to install before building."
        required: false
        type: string
      crate_type:
        description: "The type of crate to test (lib or bin)"
        required: false
        default: "lib"
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  required:
    runs-on: ubuntu-latest
    name: ubuntu - ${{ matrix.toolchain }}
    strategy:
      matrix:
        toolchain: [stable, beta]
    steps:
      - uses: actions/checkout@v4

      - name: linux dependencies
        if: inputs.linux_dependencies != ''
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends ${{ inputs.linux_dependencies }}

      - name: install rust ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: cargo generate-lockfile
        run: cargo generate-lockfile

      - name: cargo test --locked
        run: cargo test --locked --all-features --all-targets

      - name: cargo test --doc
        if: ${{ inputs.crate_type == 'lib' }}
        run: cargo test --locked --all-features --doc

  os-check:
    # run cargo test on mac and windows
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} - stable
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      # if your project needs OpenSSL, uncomment this to fix Windows builds.
      # it's commented out by default as the install command takes 5-10m.
      # - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
      #   if: runner.os == 'Windows'
      # - run: vcpkg install openssl:x64-windows-static-md
      #   if: runner.os == 'Windows'
      - name: checkout
        uses: actions/checkout@v4

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: cargo generate-lockfile
        run: cargo generate-lockfile

      - name: cargo test
        run: cargo test --locked --all-features --all-targets

      - name: cache cargo dependencies
        uses: Swatinem/rust-cache@v2

